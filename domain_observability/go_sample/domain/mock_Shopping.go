// Code generated by mockery v2.33.1. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockShopping is an autogenerated mock type for the Shopping type
type MockShopping struct {
	mock.Mock
}

type MockShopping_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShopping) EXPECT() *MockShopping_Expecter {
	return &MockShopping_Expecter{mock: &_m.Mock}
}

// ApplyToCard provides a mock function with given fields:
func (_m *MockShopping) ApplyToCard() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockShopping_ApplyToCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyToCard'
type MockShopping_ApplyToCard_Call struct {
	*mock.Call
}

// ApplyToCard is a helper method to define mock.On call
func (_e *MockShopping_Expecter) ApplyToCard() *MockShopping_ApplyToCard_Call {
	return &MockShopping_ApplyToCard_Call{Call: _e.mock.On("ApplyToCard")}
}

func (_c *MockShopping_ApplyToCard_Call) Run(run func()) *MockShopping_ApplyToCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShopping_ApplyToCard_Call) Return(_a0 float64) *MockShopping_ApplyToCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShopping_ApplyToCard_Call) RunAndReturn(run func() float64) *MockShopping_ApplyToCard_Call {
	_c.Call.Return(run)
	return _c
}

// LookUpDiscount provides a mock function with given fields: code
func (_m *MockShopping) LookUpDiscount(code DiscountCode) {
	_m.Called(code)
}

// MockShopping_LookUpDiscount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookUpDiscount'
type MockShopping_LookUpDiscount_Call struct {
	*mock.Call
}

// LookUpDiscount is a helper method to define mock.On call
//   - code DiscountCode
func (_e *MockShopping_Expecter) LookUpDiscount(code interface{}) *MockShopping_LookUpDiscount_Call {
	return &MockShopping_LookUpDiscount_Call{Call: _e.mock.On("LookUpDiscount", code)}
}

func (_c *MockShopping_LookUpDiscount_Call) Run(run func(code DiscountCode)) *MockShopping_LookUpDiscount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DiscountCode))
	})
	return _c
}

func (_c *MockShopping_LookUpDiscount_Call) Return() *MockShopping_LookUpDiscount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShopping_LookUpDiscount_Call) RunAndReturn(run func(DiscountCode)) *MockShopping_LookUpDiscount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShopping creates a new instance of MockShopping. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShopping(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShopping {
	mock := &MockShopping{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
