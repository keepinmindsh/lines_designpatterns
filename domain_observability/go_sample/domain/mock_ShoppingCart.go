// Code generated by mockery v2.33.1. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockShoppingCart is an autogenerated mock type for the ShoppingCart type
type MockShoppingCart struct {
	mock.Mock
}

type MockShoppingCart_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShoppingCart) EXPECT() *MockShoppingCart_Expecter {
	return &MockShoppingCart_Expecter{mock: &_m.Mock}
}

// ApplyDiscountCode provides a mock function with given fields: code
func (_m *MockShoppingCart) ApplyDiscountCode(code DiscountCode) {
	_m.Called(code)
}

// MockShoppingCart_ApplyDiscountCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyDiscountCode'
type MockShoppingCart_ApplyDiscountCode_Call struct {
	*mock.Call
}

// ApplyDiscountCode is a helper method to define mock.On call
//   - code DiscountCode
func (_e *MockShoppingCart_Expecter) ApplyDiscountCode(code interface{}) *MockShoppingCart_ApplyDiscountCode_Call {
	return &MockShoppingCart_ApplyDiscountCode_Call{Call: _e.mock.On("ApplyDiscountCode", code)}
}

func (_c *MockShoppingCart_ApplyDiscountCode_Call) Run(run func(code DiscountCode)) *MockShoppingCart_ApplyDiscountCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DiscountCode))
	})
	return _c
}

func (_c *MockShoppingCart_ApplyDiscountCode_Call) Return() *MockShoppingCart_ApplyDiscountCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShoppingCart_ApplyDiscountCode_Call) RunAndReturn(run func(DiscountCode)) *MockShoppingCart_ApplyDiscountCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShoppingCart creates a new instance of MockShoppingCart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShoppingCart(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShoppingCart {
	mock := &MockShoppingCart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
